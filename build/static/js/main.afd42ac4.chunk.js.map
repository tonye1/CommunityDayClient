{"version":3,"sources":["market.png","ChartPage.js","Header.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","chartEvents","eventName","callback","_ref","chartWrapper","console","log","getChart","getSelection","options","title","hAxis","viewWindow","min","max","vAxis","legend","ChartPage","react_default","a","createElement","index_esm","chartType","data","this","props","listDataFromParent","graphID","width","height","React","Component","rootElement","document","getElementById","ReactDOM","render","ChartPage_ChartPage","Header","className","src","logo","alt","App","state","response","post","responseToPost","callApi","_callee","body","regenerator_default","wrap","_context","prev","next","fetch","sent","json","status","Error","message","abrupt","stop","handleSubmit","_callee2","e","responseFloat","intSalary","intYears","_context2","preventDefault","method","headers","Content-Type","JSON","stringify","parseFloat","_this","text","setState","Math","round","push","_this2","then","res","express","catch","err","_this3","src_Header","onSubmit","type","value","onChange","target","src_ChartPage","Boolean","window","location","hostname","match","src_App_0","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.afd42ac4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/market.ffff0da7.png\";","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Chart from \"react-google-charts\";\n// Ref : https://developers.google.com/chart/interactive/docs/gallery/histogram\nconst chartEvents = [\n  {\n    eventName: \"select\",\n    callback({ chartWrapper }) {\n      console.log(\"Selected \", chartWrapper.getChart().getSelection());\n    }\n  }\n];\n\n//const data = [\n//  [\"age\", \"weight\"],\n//  [8, 12],\n//  [4, 5.5],\n//  [11, 14],\n//  [4, 5],\n//  [3, 3.5],\n//  [6.5, 7]\n//];\n \nconst options = {\n  title: \"Years vs. Salary comparison\",\n  hAxis: { title: \"Years\", viewWindow: { min: 0, max: 10 } },\n  vAxis: { title: \"Salary\", viewWindow: { min: 0, max: 100 } },\n  legend: \"none\"\n};\nclass ChartPage extends React.Component {\n  //constructor(props) {\n   //     super(props);\n   // }\n\n  render() {\n    return (\n      <Chart\n      chartType=\"ScatterChart\"\n      data={this.props.listDataFromParent}\n      options={options}\n      graphID=\"ScatterChart\"\n      width=\"100%\"\n      height=\"400px\"\n      chartEvents={chartEvents}\n    />\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<ChartPage />, rootElement);\nexport default ChartPage;\n","import React, { Component } from 'react';\nimport logo from './market.png'\nclass Header extends Component {\n  //  constructor(props) {\n  //    super(props);     \n  //  }\n\n  render() {\n    return (\n      <div>\n        <header className=\"App-header\">\n          <img src={logo} alt=\"logo\"  />\n        </header>\n      </div>\n    );\n  }\n};\nexport default Header;","import React, { Component } from 'react';\n\nimport './App.css';\nimport ChartPage from './ChartPage';\nimport Header from './Header';\n\n\n//const data = [\n//  [\"years\", \"Salary\"],\n//  [8, 12],\n//  [4, 5.5],\n//  [11, 14],\n//  [4, 5],\n//  [3, 3.5],\n//  [6.5, 7]\n//];\n\nclass App extends Component {\n  state = {\n    response: '',\n    post: '',\n    responseToPost: '',\n    data:[\n      [\"Years\", \"Salary\"],\n\n        [1.1, 39.343],\n        [1.3, 46.205],\n        [1.5, 37.731],\n        [2.0, 43.525],\n        [2.2, 39.891],\n        [2.9, 56.642],\n        [3.0, 60.150],\n        [3.2, 54.445],\n        [3.2, 64.445],\n        [3.7, 57.189],\n        [3.9, 63.218],\n        [4.0, 55.794],\n        [4.0, 56.957],\n        [4.1, 57.081],\n        [4.5, 61.111],\n        [4.9, 67.938],\n        [5.1, 66.029],\n        [5.3, 83.088],\n        [5.9, 81.363],\n        [6.0, 93.940],\n\n      ]\n  };\n\n  componentDidMount() {\n    this.callApi()\n      .then(res => this.setState({ response: res.express }))\n      .catch(err => console.log(err));\n  }\n\n  callApi = async () => {\n    const response = await fetch('https://communitydaymlpythonservice.mybluemix.net/api');\n    const body = await response.json();\n\n    if (response.status !== 200) throw Error(body.message);\n\n    return body;\n  };\n\n  handleSubmit = async e => {\n    e.preventDefault();\n    const response = await fetch('https://communitydaymlpythonservice.mybluemix.net/api', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({ post: parseFloat(this.state.post) }),\n    });\n    const body = await response.text();\n\n    this.setState({ responseToPost: body });\n    const responseFloat = parseFloat(body);\n\n\n    var intSalary = Math.round(responseFloat);\n    var intYears = parseFloat(this.state.post);\n    //this.state.data.addColumn( {'type': 'string', 'role': 'style'} );\n    //this.state.data.push([intYears, 0,intSalary]);\n    this.state.data.push([intYears, intSalary / 1000]);\n    this.setState({ data: this.state.data })\n  };\n\n  render() {\n    return (\n\n      <div>\n        <Header />\n        <div>\n          <p>{this.state.response}</p>\n          <form onSubmit={this.handleSubmit}>\n            <p>\n              <strong>Post to Server:</strong>\n            </p>\n            <input\n              type=\"text\"\n              value={this.state.post}\n              onChange={e => this.setState({ post: e.target.value })}\n            />\n            <button type=\"submit\">Submit</button>\n          </form>\n          <p>{this.state.responseToPost}</p>\n        </div>\n        <ChartPage listDataFromParent={this.state.data} />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}